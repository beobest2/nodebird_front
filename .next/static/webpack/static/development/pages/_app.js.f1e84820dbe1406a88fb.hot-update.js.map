{"version":3,"file":"static/webpack/static/development/pages/_app.js.f1e84820dbe1406a88fb.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import { all, call, put, fork, delay, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { \n    LOG_IN_SUCCESS, \n    LOG_IN_FAILURE,\n    LOG_IN_REQUEST,\n    LOG_OUT_SUCCESS, \n    LOG_OUT_FAILURE,\n    LOG_OUT_REQUEST,\n    SIGN_UP_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS \n} from '../reducers/user';\n\naxios.defaults.baseURL = 'http://localhost:3065/api';\n\n// login pattern\n\nfunction logInAPI(logInData) {\n    // 서버에 요청을 보내는 부분\n    console.log('server login ~');\n    return axios.post('/user/login', logInData, {\n        withCredentials: true,\n    });\n}\n\nfunction* logIn(action) {\n    try {\n        console.log(action.data);\n        const result = yield call(logInAPI, action.data);\n        console.log(result.data);\n        yield put({ //디스패치와 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE\n        });\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\n// signUp pattern\n\nfunction signUpAPI(signUpData) {\n    console.log('signUpAPI');\n    return axios.post('/user', signUpData);\n}\n\nfunction* signUp(action) {\n    try {\n        yield call(signUpAPI, action.data);\n        yield delay(2000);\n        //throw new Error('에러에러에러');\n        yield put({ // put은 dispatch 동일\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (e) { // signup 실패\n        console.log('!!!!');\n        console.error(e);\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\n// logOut pattern\nfunction logOutAPI() {\n    console.log('logOutAPI');\n    return axios.post('/user/logout', {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* logOut(action) {\n    try {\n        yield call(logOutAPI, action.data);\n        yield delay(2000);\n        //throw new Error('에러에러에러');\n        yield put({ // put은 dispatch 동일\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (e) { // logOut 실패\n        console.error(e);\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLogOut() {\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSagar() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchLoadUser),\n        fork(watchSignUp),\n    ]);\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AA2BA;;;AAiBA;;;AAWA;;;AAkBA;;;AAYA;;;AAiBA;;;AAIA;AACA;AA3GA;AACA;AAEA;AAYA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAGA;AACA;AAJA;AAGA;AACA;AAJA;AAKA;AAAA;AACA;AACA;AAFA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AAVA;AAWA;AACA;AADA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AACA;AAJA;AAAA;AAKA;AAAA;AACA;AADA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AACA;AACA;AAVA;AAWA;AACA;AACA;AAFA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AACA;AAJA;AAAA;AAKA;AAAA;AACA;AADA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AACA;AATA;AAUA;AACA;AACA;AAFA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}
{"ast":null,"code":"import { all, call, put, fork, delay, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user'; // login pattern\n\nfunction loginAPI() {\n  // 서버에 요청을 보내는 부분\n  console.log('server login ~');\n  return axios.post('/login');\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield delay(2000);\n    yield put({\n      //디스패치와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n} // signUp pattern\n\n\nfunction signUpAPI() {\n  console.log('signUpAPI');\n  return axios.post('/signup');\n}\n\nfunction* signUp() {\n  try {\n    yield call(signUpAPI);\n    yield delay(2000); // throw new Error('에러에러에러');\n\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSagar() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/kakao/Desktop/dev/react_birld/ch1/frontend/sagas/user.js"],"names":["all","call","put","fork","delay","takeEvery","axios","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","loginAPI","console","log","post","login","type","e","error","watchLogin","signUpAPI","signUp","watchSignUp","userSagar"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,SAAtC,QAAuD,oBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,eANJ,QAOO,kBAPP,C,CASA;;AAEA,SAASC,QAAT,GAAoB;AAChB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,SAAOT,KAAK,CAACU,IAAN,CAAW,QAAX,CAAP;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAI;AACA,UAAMhB,IAAI,CAACY,QAAD,CAAV;AACA,UAAMT,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AAAE;AACRgB,MAAAA,IAAI,EAAEX;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOY,CAAP,EAAU;AACRL,IAAAA,OAAO,CAACM,KAAR,CAAcD,CAAd;AACA,UAAMjB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAEV;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUa,UAAV,GAAuB;AACnB,QAAMhB,SAAS,CAACI,cAAD,EAAiBQ,KAAjB,CAAf;AACH,C,CAED;;;AAEA,SAASK,SAAT,GAAqB;AACjBR,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,SAAOT,KAAK,CAACU,IAAN,CAAW,SAAX,CAAP;AACH;;AAED,UAAUO,MAAV,GAAmB;AACf,MAAI;AACF,UAAMtB,IAAI,CAACqB,SAAD,CAAV;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX,CAFE,CAGF;;AACA,UAAMF,GAAG,CAAC;AAAE;AACVgB,MAAAA,IAAI,EAAEN;AADE,KAAD,CAAT;AAGD,GAPD,CAOE,OAAOO,CAAP,EAAU;AAAE;AACZL,IAAAA,OAAO,CAACM,KAAR,CAAcD,CAAd;AACA,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAER,eADE;AAERU,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACJ;;AAED,UAAUK,WAAV,GAAwB;AACpB,QAAMnB,SAAS,CAACM,eAAD,EAAkBY,MAAlB,CAAf;AACH;;AAED,eAAe,UAAUE,SAAV,GAAsB;AACjC,QAAMzB,GAAG,CAAC,CACNG,IAAI,CAACkB,UAAD,CADE,EAENlB,IAAI,CAACqB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, call, put, fork, delay, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { \n    LOG_IN_SUCCESS, \n    LOG_IN_FAILURE,\n    LOG_IN_REQUEST,\n    SIGN_UP_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS \n} from '../reducers/user';\n\n// login pattern\n\nfunction loginAPI() {\n    // 서버에 요청을 보내는 부분\n    console.log('server login ~');\n    return axios.post('/login');\n}\n\nfunction* login() {\n    try {\n        yield call(loginAPI);\n        yield delay(2000);\n        yield put({ //디스패치와 동일\n            type: LOG_IN_SUCCESS\n        });\n    } catch (e) {\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE\n        });\n    }\n}\n\nfunction* watchLogin() {\n    yield takeEvery(LOG_IN_REQUEST, login);\n}\n\n// signUp pattern\n\nfunction signUpAPI() {\n    console.log('signUpAPI');\n    return axios.post('/signup');\n}\n\nfunction* signUp() {\n    try {\n      yield call(signUpAPI);\n      yield delay(2000);\n      // throw new Error('에러에러에러');\n      yield put({ // put은 dispatch 동일\n        type: SIGN_UP_SUCCESS,\n      });\n    } catch (e) { // loginAPI 실패\n      console.error(e);\n      yield put({\n        type: SIGN_UP_FAILURE,\n        error: e,\n      });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSagar() {\n    yield all([\n        fork(watchLogin),\n        fork(watchSignUp),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { all, call, put, fork, delay, takeEvery } from 'redux-saga/effects'; // import axios from 'axios';\n\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user'; // login pattern\n\nfunction loginAPI() {\n  // 서버에 요청을 보내는 부분\n  console.log('server login ~'); //return axios.post('/login');\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield delay(2000);\n    yield put({\n      //디스패치와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n} // signUp pattern\n\n\nfunction signUpAPI() {\n  console.log('signUpAPI'); //return axios.post('/signup');\n}\n\nfunction* signUp() {\n  try {\n    yield call(signUpAPI);\n    yield delay(2000);\n    throw new Error('에러에러에러');\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSagar() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/hw/Desktop/react_basic/nodebird/nodebird_front/sagas/user.js"],"names":["all","call","put","fork","delay","takeEvery","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","loginAPI","console","log","login","type","e","error","watchLogin","signUpAPI","signUp","Error","watchSignUp","userSagar"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,SAAtC,QAAuD,oBAAvD,C,CACA;;AAEA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,eANJ,QAOO,kBAPP,C,CASA;;AAEA,SAASC,QAAT,GAAoB;AAChB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAFgB,CAGhB;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAI;AACA,UAAMd,IAAI,CAACW,QAAD,CAAV;AACA,UAAMR,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AAAE;AACRc,MAAAA,IAAI,EAAEV;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOW,CAAP,EAAU;AACRJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,CAAd;AACA,UAAMf,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAET;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUY,UAAV,GAAuB;AACnB,QAAMd,SAAS,CAACG,cAAD,EAAiBO,KAAjB,CAAf;AACH,C,CAED;;;AAEA,SAASK,SAAT,GAAqB;AACjBP,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EADiB,CAEjB;AACH;;AAED,UAAUO,MAAV,GAAmB;AACf,MAAI;AACF,UAAMpB,IAAI,CAACmB,SAAD,CAAV;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAM,IAAIkB,KAAJ,CAAU,QAAV,CAAN;AACA,UAAMpB,GAAG,CAAC;AAAE;AACVc,MAAAA,IAAI,EAAEL;AADE,KAAD,CAAT;AAGD,GAPD,CAOE,OAAOM,CAAP,EAAU;AAAE;AACZJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,CAAd;AACA,UAAMf,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAEP,eADE;AAERS,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACJ;;AAED,UAAUM,WAAV,GAAwB;AACpB,QAAMlB,SAAS,CAACK,eAAD,EAAkBW,MAAlB,CAAf;AACH;;AAED,eAAe,UAAUG,SAAV,GAAsB;AACjC,QAAMxB,GAAG,CAAC,CACNG,IAAI,CAACgB,UAAD,CADE,EAENhB,IAAI,CAACoB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, call, put, fork, delay, takeEvery } from 'redux-saga/effects';\r\n// import axios from 'axios';\r\n\r\nimport { \r\n    LOG_IN_SUCCESS, \r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST,\r\n    SIGN_UP_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS \r\n} from '../reducers/user';\r\n\r\n// login pattern\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    console.log('server login ~');\r\n    //return axios.post('/login');\r\n}\r\n\r\nfunction* login() {\r\n    try {\r\n        yield call(loginAPI);\r\n        yield delay(2000);\r\n        yield put({ //디스패치와 동일\r\n            type: LOG_IN_SUCCESS\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\n// signUp pattern\r\n\r\nfunction signUpAPI() {\r\n    console.log('signUpAPI');\r\n    //return axios.post('/signup');\r\n}\r\n\r\nfunction* signUp() {\r\n    try {\r\n      yield call(signUpAPI);\r\n      yield delay(2000);\r\n      throw new Error('에러에러에러');\r\n      yield put({ // put은 dispatch 동일\r\n        type: SIGN_UP_SUCCESS,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: SIGN_UP_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSagar() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}
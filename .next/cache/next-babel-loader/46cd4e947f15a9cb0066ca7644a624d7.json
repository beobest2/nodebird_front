{"ast":null,"code":"import { all, call, put, fork, delay, takeEvery } from 'redux-saga/effects'; // import axios from 'axios';\n\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user'; // login pattern\n\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  console.log('server login ~');\n  return axios.post('http://localhost:3065:/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield delay(2000);\n    yield put({\n      //디스패치와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n} // signUp pattern\n\n\nfunction signUpAPI() {\n  console.log('signUpAPI'); //return axios.post('/signup');\n}\n\nfunction* signUp() {\n  try {\n    yield call(signUpAPI);\n    yield delay(2000); //throw new Error('에러에러에러');\n\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSagar() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/kakao/Desktop/dev/node_bird/nodebird_front/sagas/user.js"],"names":["all","call","put","fork","delay","takeEvery","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","loginAPI","loginData","console","log","axios","post","withCredentials","login","type","e","error","watchLogin","signUpAPI","signUp","watchSignUp","userSagar"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,SAAtC,QAAuD,oBAAvD,C,CACA;;AAEA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,eANJ,QAOO,kBAPP,C,CASA;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AACzB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,SAAOC,KAAK,CAACC,IAAN,CAAW,mCAAX,EAAgDJ,SAAhD,EAA2D;AAC9DK,IAAAA,eAAe,EAAE;AAD6C,GAA3D,CAAP;AAGH;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAI;AACA,UAAMlB,IAAI,CAACW,QAAD,CAAV;AACA,UAAMR,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AAAE;AACRkB,MAAAA,IAAI,EAAEd;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOe,CAAP,EAAU;AACRP,IAAAA,OAAO,CAACQ,KAAR,CAAcD,CAAd;AACA,UAAMnB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAEb;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUgB,UAAV,GAAuB;AACnB,QAAMlB,SAAS,CAACG,cAAD,EAAiBW,KAAjB,CAAf;AACH,C,CAED;;;AAEA,SAASK,SAAT,GAAqB;AACjBV,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EADiB,CAEjB;AACH;;AAED,UAAUU,MAAV,GAAmB;AACf,MAAI;AACF,UAAMxB,IAAI,CAACuB,SAAD,CAAV;AACA,UAAMpB,KAAK,CAAC,IAAD,CAAX,CAFE,CAGF;;AACA,UAAMF,GAAG,CAAC;AAAE;AACVkB,MAAAA,IAAI,EAAET;AADE,KAAD,CAAT;AAGD,GAPD,CAOE,OAAOU,CAAP,EAAU;AAAE;AACZP,IAAAA,OAAO,CAACQ,KAAR,CAAcD,CAAd;AACA,UAAMnB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEX,eADE;AAERa,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACJ;;AAED,UAAUK,WAAV,GAAwB;AACpB,QAAMrB,SAAS,CAACK,eAAD,EAAkBe,MAAlB,CAAf;AACH;;AAED,eAAe,UAAUE,SAAV,GAAsB;AACjC,QAAM3B,GAAG,CAAC,CACNG,IAAI,CAACoB,UAAD,CADE,EAENpB,IAAI,CAACuB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, call, put, fork, delay, takeEvery } from 'redux-saga/effects';\n// import axios from 'axios';\n\nimport { \n    LOG_IN_SUCCESS, \n    LOG_IN_FAILURE,\n    LOG_IN_REQUEST,\n    SIGN_UP_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS \n} from '../reducers/user';\n\n// login pattern\n\nfunction loginAPI(loginData) {\n    // 서버에 요청을 보내는 부분\n    console.log('server login ~');\n    return axios.post('http://localhost:3065:/user/login', loginData, {\n        withCredentials: true,\n    });\n}\n\nfunction* login() {\n    try {\n        yield call(loginAPI);\n        yield delay(2000);\n        yield put({ //디스패치와 동일\n            type: LOG_IN_SUCCESS\n        });\n    } catch (e) {\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE\n        });\n    }\n}\n\nfunction* watchLogin() {\n    yield takeEvery(LOG_IN_REQUEST, login);\n}\n\n// signUp pattern\n\nfunction signUpAPI() {\n    console.log('signUpAPI');\n    //return axios.post('/signup');\n}\n\nfunction* signUp() {\n    try {\n      yield call(signUpAPI);\n      yield delay(2000);\n      //throw new Error('에러에러에러');\n      yield put({ // put은 dispatch 동일\n        type: SIGN_UP_SUCCESS,\n      });\n    } catch (e) { // loginAPI 실패\n      console.error(e);\n      yield put({\n        type: SIGN_UP_FAILURE,\n        error: e,\n      });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSagar() {\n    yield all([\n        fork(watchLogin),\n        fork(watchSignUp),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}
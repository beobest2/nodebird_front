{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(Logout),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogout),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSagar);\n\nimport { all, call, put, fork, delay, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\naxios.defaults.baseURL = 'http://localhost:3065/api'; // login pattern\n\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  console.log('server login ~');\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log(action.data);\n          _context.next = 4;\n          return call(loginAPI, action.data);\n\n        case 4:\n          result = _context.sent;\n          console.log(result.data);\n          _context.next = 8;\n          return put({\n            //디스패치와 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 15;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // signUp pattern\n\n\nfunction signUpAPI(signUpData) {\n  console.log('signUpAPI');\n  return axios.post('/user', signUpData);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context3.next = 5;\n          return delay(2000);\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            // put은 dispatch 동일\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 7:\n          _context3.next = 15;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          // signup 실패\n          console.log('!!!!');\n          console.error(_context3.t0);\n          _context3.next = 15;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // logout pattern\n\n\nfunction LogoutAPI() {\n  console.log('logoutAPI');\n  return axios.post('/user/logout');\n}\n\nfunction Logout(action) {\n  return _regeneratorRuntime.wrap(function Logout$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context5.next = 5;\n          return delay(2000);\n\n        case 5:\n          _context5.next = 7;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 7:\n          _context5.next = 14;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](0);\n          // logout 실패\n          console.error(_context5.t0);\n          _context5.next = 14;\n          return put({\n            type: LOG_OUT_SUCCESS,\n            error: _context5.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 9]]);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOG_OUT_REQUEST, Logout);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSagar() {\n  return _regeneratorRuntime.wrap(function userSagar$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchLoadUser), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/kakao/Desktop/dev/node_bird/nodebird_front/sagas/user.js"],"names":["login","watchLogin","signUp","watchSignUp","Logout","watchLogout","userSagar","all","call","put","fork","delay","takeEvery","axios","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","defaults","baseURL","loginAPI","loginData","console","log","post","withCredentials","action","data","result","type","error","signUpAPI","signUpData","LogoutAPI","watchLoadUser"],"mappings":"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","sourcesContent":["import { all, call, put, fork, delay, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { \n    LOG_IN_SUCCESS, \n    LOG_IN_FAILURE,\n    LOG_IN_REQUEST,\n    LOG_OUT_SUCCESS, \n    LOG_OUT_FAILURE,\n    LOG_OUT_REQUEST,\n    SIGN_UP_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS \n} from '../reducers/user';\n\naxios.defaults.baseURL = 'http://localhost:3065/api';\n\n// login pattern\n\nfunction loginAPI(loginData) {\n    // 서버에 요청을 보내는 부분\n    console.log('server login ~');\n    return axios.post('/user/login', loginData, {\n        withCredentials: true,\n    });\n}\n\nfunction* login(action) {\n    try {\n        console.log(action.data);\n        const result = yield call(loginAPI, action.data);\n        console.log(result.data);\n        yield put({ //디스패치와 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE\n        });\n    }\n}\n\nfunction* watchLogin() {\n    yield takeEvery(LOG_IN_REQUEST, login);\n}\n\n// signUp pattern\n\nfunction signUpAPI(signUpData) {\n    console.log('signUpAPI');\n    return axios.post('/user', signUpData);\n}\n\nfunction* signUp(action) {\n    try {\n        yield call(signUpAPI, action.data);\n        yield delay(2000);\n        //throw new Error('에러에러에러');\n        yield put({ // put은 dispatch 동일\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (e) { // signup 실패\n        console.log('!!!!');\n        console.error(e);\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\n// logout pattern\nfunction LogoutAPI() {\n    console.log('logoutAPI');\n    return axios.post('/user/logout', );\n}\n\nfunction* Logout(action) {\n    try {\n        yield call(signUpAPI, action.data);\n        yield delay(2000);\n        //throw new Error('에러에러에러');\n        yield put({ // put은 dispatch 동일\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (e) { // logout 실패\n        console.error(e);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLogout() {\n    yield takeEvery(LOG_OUT_REQUEST, Logout);\n}\n\nexport default function* userSagar() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchLoadUser),\n        fork(watchSignUp),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}
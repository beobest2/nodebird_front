{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSagar);\n\nimport { all, call, put, fork, delay, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user'; // login pattern\n\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  console.log('server login ~');\n  return axios.post('http://localhost:3065/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return delay(2000);\n\n        case 5:\n          _context.next = 7;\n          return put({\n            //디스패치와 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 7:\n          _context.next = 15;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('!!!!');\n          console.error(_context.t0);\n          _context.next = 15;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // signUp pattern\n\n\nfunction signUpAPI(signUpData) {\n  console.log('signUpAPI');\n  return axios.post('http://localhost:3065/api/user/', signUpData);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context3.next = 5;\n          return delay(2000);\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            // put은 dispatch 동일\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSagar() {\n  return _regeneratorRuntime.wrap(function userSagar$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/kakao/Desktop/dev/node_bird/nodebird_front/sagas/user.js"],"names":["login","watchLogin","signUp","watchSignUp","userSagar","all","call","put","fork","delay","takeEvery","axios","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","loginAPI","loginData","console","log","post","withCredentials","type","error","signUpAPI","signUpData","action","data"],"mappings":";;;;yBAsBUA,K;;;yBAgBAC,U;;;yBAWAC,M;;;yBAiBAC,W;;;yBAIeC,S;;AAtEzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,SAAtC,QAAuD,oBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,eANJ,QAOO,kBAPP,C,CASA;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AACzB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,SAAOV,KAAK,CAACW,IAAN,CAAW,kCAAX,EAA+CH,SAA/C,EAA0D;AAC7DI,IAAAA,eAAe,EAAE;AAD4C,GAA1D,CAAP;AAGH;;AAED,SAAUvB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMM,IAAI,CAACY,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMT,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMF,GAAG,CAAC;AAAE;AACRiB,YAAAA,IAAI,EAAEZ;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQQ,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,UAAAA,OAAO,CAACK,KAAR;AATR;AAUQ,iBAAMlB,GAAG,CAAC;AACNiB,YAAAA,IAAI,EAAEX;AADA,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUZ,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMS,SAAS,CAACI,cAAD,EAAiBd,KAAjB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AAEA,SAAS0B,SAAT,CAAmBC,UAAnB,EAA+B;AAC3BP,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,SAAOV,KAAK,CAACW,IAAN,CAAW,iCAAX,EAA8CK,UAA9C,CAAP;AACH;;AAED,SAAUzB,MAAV,CAAiB0B,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEM,iBAAMtB,IAAI,CAACoB,SAAD,EAAYE,MAAM,CAACC,IAAnB,CAAV;;AAFN;AAAA;AAGM,iBAAMpB,KAAK,CAAC,IAAD,CAAX;;AAHN;AAAA;AAKM,iBAAMF,GAAG,CAAC;AAAE;AACViB,YAAAA,IAAI,EAAEP;AADE,WAAD,CAAT;;AALN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQkB;AACZG,UAAAA,OAAO,CAACK,KAAR;AATN;AAUM,iBAAMlB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAET,eADE;AAERU,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAVN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUtB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,SAAS,CAACM,eAAD,EAAkBd,MAAlB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNG,IAAI,CAACP,UAAD,CADE,EAENO,IAAI,CAACL,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, put, fork, delay, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { \n    LOG_IN_SUCCESS, \n    LOG_IN_FAILURE,\n    LOG_IN_REQUEST,\n    SIGN_UP_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS \n} from '../reducers/user';\n\n// login pattern\n\nfunction loginAPI(loginData) {\n    // 서버에 요청을 보내는 부분\n    console.log('server login ~');\n    return axios.post('http://localhost:3065/user/login', loginData, {\n        withCredentials: true,\n    });\n}\n\nfunction* login() {\n    try {\n        yield call(loginAPI);\n        yield delay(2000);\n        yield put({ //디스패치와 동일\n            type: LOG_IN_SUCCESS\n        });\n    } catch (e) {\n        console.log('!!!!');\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE\n        });\n    }\n}\n\nfunction* watchLogin() {\n    yield takeEvery(LOG_IN_REQUEST, login);\n}\n\n// signUp pattern\n\nfunction signUpAPI(signUpData) {\n    console.log('signUpAPI');\n    return axios.post('http://localhost:3065/api/user/', signUpData);\n}\n\nfunction* signUp(action) {\n    try {\n      yield call(signUpAPI, action.data);\n      yield delay(2000);\n      //throw new Error('에러에러에러');\n      yield put({ // put은 dispatch 동일\n        type: SIGN_UP_SUCCESS,\n      });\n    } catch (e) { // loginAPI 실패\n      console.error(e);\n      yield put({\n        type: SIGN_UP_FAILURE,\n        error: e,\n      });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSagar() {\n    yield all([\n        fork(watchLogin),\n        fork(watchSignUp),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}
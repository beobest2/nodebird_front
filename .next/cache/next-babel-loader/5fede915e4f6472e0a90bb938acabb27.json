{"ast":null,"code":"import { all, call, put, fork, delay, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\naxios.defaults.baseURL = 'http://localhost:3065/api'; // login pattern\n\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  console.log('server login ~');\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    console.log(action.data);\n    const result = yield call(loginAPI, action.data);\n    console.log(result.data);\n    yield put({\n      //디스패치와 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n} // signUp pattern\n\n\nfunction signUpAPI(signUpData) {\n  console.log('signUpAPI');\n  return axios.post('/user', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data);\n    yield delay(2000); //throw new Error('에러에러에러');\n\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // signup 실패\n    console.log('!!!!');\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSagar() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/kakao/Desktop/dev/node_bird/nodebird_front/sagas/user.js"],"names":["all","call","put","fork","delay","takeEvery","axios","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","defaults","baseURL","loginAPI","loginData","console","log","post","withCredentials","login","action","data","result","type","e","error","watchLogin","signUpAPI","signUpData","signUp","watchSignUp","userSagar"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,SAAtC,QAAuD,oBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,eANJ,QAOO,kBAPP;AASAN,KAAK,CAACO,QAAN,CAAeC,OAAf,GAAyB,2BAAzB,C,CAEA;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AACzB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,SAAOZ,KAAK,CAACa,IAAN,CAAW,aAAX,EAA0BH,SAA1B,EAAqC;AACxCI,IAAAA,eAAe,EAAE;AADuB,GAArC,CAAP;AAGH;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYI,MAAM,CAACC,IAAnB;AACA,UAAMC,MAAM,GAAG,MAAMvB,IAAI,CAACc,QAAD,EAAWO,MAAM,CAACC,IAAlB,CAAzB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYM,MAAM,CAACD,IAAnB;AACA,UAAMrB,GAAG,CAAC;AAAE;AACRuB,MAAAA,IAAI,EAAElB,cADA;AAENgB,MAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,KAAD,CAAT;AAIH,GARD,CAQE,OAAOG,CAAP,EAAU;AACRT,IAAAA,OAAO,CAACU,KAAR,CAAcD,CAAd;AACA,UAAMxB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEjB;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUoB,UAAV,GAAuB;AACnB,QAAMvB,SAAS,CAACI,cAAD,EAAiBY,KAAjB,CAAf;AACH,C,CAED;;;AAEA,SAASQ,SAAT,CAAmBC,UAAnB,EAA+B;AAC3Bb,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,SAAOZ,KAAK,CAACa,IAAN,CAAW,OAAX,EAAoBW,UAApB,CAAP;AACH;;AAED,UAAUC,MAAV,CAAiBT,MAAjB,EAAyB;AACrB,MAAI;AACA,UAAMrB,IAAI,CAAC4B,SAAD,EAAYP,MAAM,CAACC,IAAnB,CAAV;AACA,UAAMnB,KAAK,CAAC,IAAD,CAAX,CAFA,CAGA;;AACA,UAAMF,GAAG,CAAC;AAAE;AACRuB,MAAAA,IAAI,EAAEb;AADA,KAAD,CAAT;AAGH,GAPD,CAOE,OAAOc,CAAP,EAAU;AAAE;AACVT,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACU,KAAR,CAAcD,CAAd;AACA,UAAMxB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEf,eADA;AAENiB,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUM,WAAV,GAAwB;AACpB,QAAM3B,SAAS,CAACM,eAAD,EAAkBoB,MAAlB,CAAf;AACH;;AAED,eAAe,UAAUE,SAAV,GAAsB;AACjC,QAAMjC,GAAG,CAAC,CACNG,IAAI,CAACyB,UAAD,CADE,EAENzB,IAAI,CAAC6B,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, call, put, fork, delay, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { \n    LOG_IN_SUCCESS, \n    LOG_IN_FAILURE,\n    LOG_IN_REQUEST,\n    SIGN_UP_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS \n} from '../reducers/user';\n\naxios.defaults.baseURL = 'http://localhost:3065/api';\n\n// login pattern\n\nfunction loginAPI(loginData) {\n    // 서버에 요청을 보내는 부분\n    console.log('server login ~');\n    return axios.post('/user/login', loginData, {\n        withCredentials: true,\n    });\n}\n\nfunction* login(action) {\n    try {\n        console.log(action.data);\n        const result = yield call(loginAPI, action.data);\n        console.log(result.data);\n        yield put({ //디스패치와 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE\n        });\n    }\n}\n\nfunction* watchLogin() {\n    yield takeEvery(LOG_IN_REQUEST, login);\n}\n\n// signUp pattern\n\nfunction signUpAPI(signUpData) {\n    console.log('signUpAPI');\n    return axios.post('/user', signUpData);\n}\n\nfunction* signUp(action) {\n    try {\n        yield call(signUpAPI, action.data);\n        yield delay(2000);\n        //throw new Error('에러에러에러');\n        yield put({ // put은 dispatch 동일\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (e) { // signup 실패\n        console.log('!!!!');\n        console.error(e);\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSagar() {\n    yield all([\n        fork(watchLogin),\n        fork(watchSignUp),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}
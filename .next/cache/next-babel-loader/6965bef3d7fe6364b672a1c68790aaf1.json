{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hw\\\\Desktop\\\\react_basic\\\\nodebird\\\\nodebird_front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Button, Icon, Card, Avatar, Form, Input, List, Comment } from 'antd';\nimport Link from 'next/Link';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      isAddingComment = _useSelector2.isAddingComment,\n      commentAdded = _useSelector2.commentAdded;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('you need to login first!');\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"follow\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, post.content.split(/(#[^\\s]+)/g).map(function (v) {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: \"/hashtag\",\n          key: v,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, v));\n      }\n\n      return v;\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"comment\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" comments\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, item.User.nickname[0]),\n        content: item.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    creatAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/hw/Desktop/react_basic/nodebird/nodebird_front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Button","Icon","Card","Avatar","Form","Input","List","Comment","Link","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","isAddingComment","commentAdded","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","User","nickname","content","split","map","v","match","Comments","length","item","propTypes","shape","object","string","creatAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport { Button, Icon, Card, Avatar, Form, Input, List, Comment } from 'antd';\r\nimport Link from 'next/Link';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const { me } = useSelector(state => state.user);\r\n    const { isAddingComment, commentAdded } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n    }, []);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!me) {\r\n            return alert('you need to login first!');\r\n        }\r\n        dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data: {\r\n                postId: post.id,\r\n            },\r\n        })\r\n    }, [me && me.id]);\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded === true])\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Card\r\n                key = {+post.createdAt}\r\n                cover = {post.img && <img alt=\"example\" src={post.img} />}\r\n                actions = {[\r\n                    <Icon type=\"retweet\" key=\"retweet\" />,\r\n                    <Icon type=\"heart\" key=\"heart\" />,\r\n                    <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n                    <Icon type=\"ellipsis\" key=\"ellipsis\" />,\r\n                ]}\r\n                extra={<Button>follow</Button>}\r\n            >\r\n                <Card.Meta\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    title={post.User.nickname}\r\n                    description={(\r\n                        <div>{post.content.split(/(#[^\\s]+)/g).map((v) => {\r\n                            if (v.match(/#[^\\s]+/)) {\r\n                                return (\r\n                                    <Link href=\"/hashtag\" key={v}><a>{v}</a></Link>\r\n                                );\r\n                            }\r\n                            return v;\r\n                        })}\r\n                        </div>\r\n                    )}\r\n                />\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit={onSubmitComment}>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText}/>\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>comment</Button>\r\n                    </Form>\r\n                    <List \r\n                        header={`${post.Comments ? post.Comments.length : 0} comments`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        creatAt: PropTypes.object,\r\n    }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}